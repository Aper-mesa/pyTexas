/* Generated by Cython 3.1.4 */

#ifndef __PYX_HAVE__steam_wrapper
#define __PYX_HAVE__steam_wrapper

#include "Python.h"
struct SteamCallback;

/* "steam_wrapper.pyx":109
 *     void del_game_overlay_activated_handler(void * handler)
 * 
 * cdef public class SteamCallback[object SteamCallback, type SteamCallback_Type]:             # <<<<<<<<<<<<<<
 *     cdef:
 *         void * _handler
*/
struct SteamCallback {
  PyObject_HEAD
  struct __pyx_vtabstruct_13steam_wrapper_SteamCallback *__pyx_vtab;
  void *_handler;
  PyObject *_py_callback;
  int callback_id;
};

#ifndef __PYX_HAVE_API__steam_wrapper

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(_T) _T
#endif

__PYX_EXTERN_C DL_IMPORT(PyTypeObject) SteamCallback_Type;

#endif /* !__PYX_HAVE_API__steam_wrapper */

/* WARNING: the interface of the module init function changed in CPython 3.5. */
/* It now returns a PyModuleDef instance instead of a PyModule instance. */

/* WARNING: Use PyImport_AppendInittab("steam_wrapper", PyInit_steam_wrapper) instead of calling PyInit_steam_wrapper directly from Python 3.5 */
PyMODINIT_FUNC PyInit_steam_wrapper(void);

#if PY_VERSION_HEX >= 0x03050000 && (defined(__GNUC__) || defined(__clang__) || defined(_MSC_VER) || (defined(__cplusplus) && __cplusplus >= 201402L))
#if defined(__cplusplus) && __cplusplus >= 201402L
[[deprecated("Use PyImport_AppendInittab(\"steam_wrapper\", PyInit_steam_wrapper) instead of calling PyInit_steam_wrapper directly.")]] inline
#elif defined(__GNUC__) || defined(__clang__)
__attribute__ ((__deprecated__("Use PyImport_AppendInittab(\"steam_wrapper\", PyInit_steam_wrapper) instead of calling PyInit_steam_wrapper directly."), __unused__)) __inline__
#elif defined(_MSC_VER)
__declspec(deprecated("Use PyImport_AppendInittab(\"steam_wrapper\", PyInit_steam_wrapper) instead of calling PyInit_steam_wrapper directly.")) __inline
#endif
static PyObject* __PYX_WARN_IF_PyInit_steam_wrapper_INIT_CALLED(PyObject* res) {
  return res;
}
#define PyInit_steam_wrapper() __PYX_WARN_IF_PyInit_steam_wrapper_INIT_CALLED(PyInit_steam_wrapper())
#endif

#endif /* !__PYX_HAVE__steam_wrapper */
